# Generated by Django 2.2 on 2021-01-13 21:03

from django.db import migrations
from fluent_contents.models import Placeholder, ContentItem
from apps.common_metrics.models import CommonMetricVisualization
from apps.plugins.models import CommonMetricSankey, CommonMetricBarChart, CommonMetricLineChart, CommonMetricStackedBarChart, CommonMetricDualAxisLineAndColumn

class Migration(migrations.Migration):

    dependencies = [
        ('plugins', '0006_auto_20210113_0332'),
    ]

    def migrate_data(apps, schema_editor):
        # Sankey
        for visualization in CommonMetricVisualization.objects.exclude(common_metric_id__isnull=True).exclude(sankey_id__isnull=True):
            try:
                placeholder = Placeholder.objects.get_by_slot(visualization.common_metric, 'visualizations')  
            except Placeholder.DoesNotExist:
                placeholder = Placeholder.objects.create_for_object(visualization.common_metric, 'visualizations')  

            sankey = visualization.sankey
            content_item = CommonMetricSankey.objects.create_for_placeholder(
                placeholder,
                title = sankey.title,
                short_title = sankey.short_title,
                description = sankey.description,
                x_axis_title = sankey.x_axis_title,
                y_axis_title = sankey.y_axis_title,
                aggregate_by = sankey.aggregate_by,
                hide_tooltips = sankey.hide_tooltips,
                metric_name_id = sankey.metric_name_id,
                sort_order = visualization.order,
            )

            content_item.metric_category.add(*sankey.metric_category.all())
            content_item.metric_subgroup.add(*sankey.metric_subgroup.all())
            content_item.agency.add(*sankey.agency.all())

        # Bar Chart
        for visualization in CommonMetricVisualization.objects.exclude(common_metric_id__isnull=True).exclude(bar_chart_id__isnull=True):
            try:
                placeholder = Placeholder.objects.get_by_slot(visualization.common_metric, 'visualizations')  
            except Placeholder.DoesNotExist:
                placeholder = Placeholder.objects.create_for_object(visualization.common_metric, 'visualizations')  

            bar_chart = visualization.bar_chart
            content_item = CommonMetricBarChart.objects.create_for_placeholder(
                placeholder,
                title = bar_chart.title,
                short_title = bar_chart.short_title,
                description = bar_chart.description,
                x_axis_title = bar_chart.x_axis_title,
                y_axis_title = bar_chart.y_axis_title,
                aggregate_by = bar_chart.aggregate_by,
                hide_tooltips = bar_chart.hide_tooltips,
                metric_name_id = bar_chart.metric_name_id,
                hide_interactive_legend = bar_chart.hide_interactive_legend,
                suffix = bar_chart.suffix,
                sort_order = visualization.order,
            )

            content_item.metric_category.add(*bar_chart.metric_category.all())
            content_item.metric_subgroup.add(*bar_chart.metric_subgroup.all())
            content_item.agency.add(*bar_chart.agency.all())

        # Line Chart
        for visualization in CommonMetricVisualization.objects.exclude(common_metric_id__isnull=True).exclude(line_chart_id__isnull=True):
            try:
                placeholder = Placeholder.objects.get_by_slot(visualization.common_metric, 'visualizations')  
            except Placeholder.DoesNotExist:
                placeholder = Placeholder.objects.create_for_object(visualization.common_metric, 'visualizations')  

            line_chart = visualization.line_chart
            content_item = CommonMetricLineChart.objects.create_for_placeholder(
                placeholder,
                title = line_chart.title,
                short_title = line_chart.short_title,
                description = line_chart.description,
                x_axis_title = line_chart.x_axis_title,
                y_axis_title = line_chart.y_axis_title,
                aggregate_by = line_chart.aggregate_by,
                hide_tooltips = line_chart.hide_tooltips,
                metric_name_id = line_chart.metric_name_id,
                hide_interactive_legend = line_chart.hide_interactive_legend,
                suffix = line_chart.suffix,
                sort_order = visualization.order,
            )

            content_item.metric_category.add(*line_chart.metric_category.all())
            content_item.metric_subgroup.add(*line_chart.metric_subgroup.all())
            content_item.agency.add(*line_chart.agency.all())

        # Stacked Bar Chart
        for visualization in CommonMetricVisualization.objects.exclude(common_metric_id__isnull=True).exclude(stacked_bar_chart_id__isnull=True):
            try:
                placeholder = Placeholder.objects.get_by_slot(visualization.common_metric, 'visualizations')  
            except Placeholder.DoesNotExist:
                placeholder = Placeholder.objects.create_for_object(visualization.common_metric, 'visualizations')  

            stacked_bar_chart = visualization.stacked_bar_chart
            content_item = CommonMetricStackedBarChart.objects.create_for_placeholder(
                placeholder,
                title = stacked_bar_chart.title,
                short_title = stacked_bar_chart.short_title,
                description = stacked_bar_chart.description,
                x_axis_title = stacked_bar_chart.x_axis_title,
                y_axis_title = stacked_bar_chart.y_axis_title,
                aggregate_by = stacked_bar_chart.aggregate_by,
                hide_tooltips = stacked_bar_chart.hide_tooltips,
                metric_name_id = stacked_bar_chart.metric_name_id,
                hide_interactive_legend = stacked_bar_chart.hide_interactive_legend,
                disable_distribution_view = stacked_bar_chart.disable_distribution_view,
                suffix = stacked_bar_chart.suffix,
                sort_order = visualization.order,
            )

            content_item.metric_category.add(*stacked_bar_chart.metric_category.all())
            content_item.metric_subgroup.add(*stacked_bar_chart.metric_subgroup.all())
            content_item.agency.add(*stacked_bar_chart.agency.all())

        # Dual Axis Line And Column
        for visualization in CommonMetricVisualization.objects.exclude(common_metric_id__isnull=True).exclude(dual_axis_line_and_column_id__isnull=True):
            try:
                placeholder = Placeholder.objects.get_by_slot(visualization.common_metric, 'visualizations')  
            except Placeholder.DoesNotExist:
                placeholder = Placeholder.objects.create_for_object(visualization.common_metric, 'visualizations')  

            dual_axis_line_and_column = visualization.dual_axis_line_and_column
            content_item = CommonMetricDualAxisLineAndColumn.objects.create_for_placeholder(
                placeholder,
                title = dual_axis_line_and_column.title,
                short_title = dual_axis_line_and_column.short_title,
                description = dual_axis_line_and_column.description,
                x_axis_title = dual_axis_line_and_column.x_axis_title,
                y_axis_title = dual_axis_line_and_column.y_axis_title,
                aggregate_by = dual_axis_line_and_column.aggregate_by,
                hide_tooltips = dual_axis_line_and_column.hide_tooltips,
                metric_name_id = dual_axis_line_and_column.metric_name_id,
                hide_interactive_legend = dual_axis_line_and_column.hide_interactive_legend,
                line_aggregate_by = dual_axis_line_and_column.line_aggregate_by,
                alternate_axis_title = dual_axis_line_and_column.alternate_axis_title,
                dual_axis_type = dual_axis_line_and_column.dual_axis_type,
                suffix = dual_axis_line_and_column.suffix,
                sort_order = visualization.order,
            )

            content_item.metric_category.add(*dual_axis_line_and_column.metric_category.all())
            content_item.metric_subgroup.add(*dual_axis_line_and_column.metric_subgroup.all())
            content_item.agency.add(*dual_axis_line_and_column.agency.all())
            content_item.line_metric_category.add(*dual_axis_line_and_column.line_metric_category.all())
            content_item.line_metric_subgroup.add(*dual_axis_line_and_column.line_metric_subgroup.all())
            content_item.line_agency.add(*dual_axis_line_and_column.line_agency.all())

    def reverse_migration(apps, schema_editor):
        for visualization in CommonMetricVisualization.objects.exclude(common_metric_id__isnull=True):
            content_items = ContentItem.objects.filter(parent_id=visualization.common_metric_id)

            for content_item in content_items:
                if(
                    content_item._meta.object_name == 'CommonMetricSankey'
                    or content_item._meta.object_name == 'CommonMetricBarChart'
                    or content_item._meta.object_name == 'CommonMetricLineChart'
                    or content_item._meta.object_name == 'CommonMetricStackedBarChart'
                ):
                    content_item.metric_category.clear()
                    content_item.metric_subgroup.clear()
                    content_item.agency.clear()
                    content_item.delete()
                elif(content_item._meta.object_name == 'CommonMetricDualAxisLineAndColumn'):
                    content_item.metric_category.clear()
                    content_item.metric_subgroup.clear()
                    content_item.agency.clear()
                    content_item.line_metric_category.clear()
                    content_item.line_metric_subgroup.clear()
                    content_item.line_agency.clear()
                    content_item.delete()

    operations = [
        migrations.RunPython(migrate_data, reverse_migration),
    ]
